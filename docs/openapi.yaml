 openapi: 3.1.0
 info:
   title: Embolsadora Cloud API
   version: 1.0.0
   description: >
     Superficies separadas:
     - **/api/v1/**: ABM (JWT + RBAC)
     - **/api/v1/consumers/**: Ingesta batch (API Key + idempotencia)
 servers:
   - url: https://api.tu-dominio.com
 
 tags:
   - name: Users
   - name: Machines
   - name: Tenants
   - name: Consumers
 
 paths:
   ########################
   # ABM (JWT + RBAC)
   ########################
   /api/v1/users:
     get:
       tags: [Users]
       summary: Listar usuarios
       security: [{ bearerAuth: [] }]
       parameters:
         - $ref: '#/components/parameters/Cursor'
         - $ref: '#/components/parameters/Limit'
       responses:
         '200': { $ref: '#/components/responses/UserList' }
     post:
       tags: [Users]
       summary: Crear usuario
       security: [{ bearerAuth: [] }]
       requestBody:
         required: true
         content:
           application/json: { schema: { $ref: '#/components/schemas/UserCreate' } }
       responses:
         '201': { $ref: '#/components/responses/CreatedID' }
 
   /api/v1/machines:
     get:
       tags: [Machines]
       summary: Listar máquinas
       security: [{ bearerAuth: [] }]
       parameters:
         - $ref: '#/components/parameters/Cursor'
         - $ref: '#/components/parameters/Limit'
       responses:
         '200': { $ref: '#/components/responses/MachineList' }
     post:
       tags: [Machines]
       summary: Crear máquina
       security: [{ bearerAuth: [] }]
       requestBody:
         required: true
         content:
           application/json: { schema: { $ref: '#/components/schemas/MachineCreate' } }
       responses:
         '201': { $ref: '#/components/responses/CreatedID' }
 
   /api/v1/tenants:
     get:
       tags: [Tenants]
       summary: Listar tenants
       description: Requiere rol con permiso `tenants:list`.
       security: [{ bearerAuth: [] }]
       parameters:
         - $ref: '#/components/parameters/Cursor'
         - $ref: '#/components/parameters/Limit'
       responses:
         '200': { $ref: '#/components/responses/TenantList' }
     post:
       tags: [Tenants]
       summary: Crear tenant
       description: Requiere rol con permiso `tenants:create`.
       security: [{ bearerAuth: [] }]
       requestBody:
         required: true
         content:
           application/json: { schema: { $ref: '#/components/schemas/TenantCreate' } }
       responses:
         '201': { $ref: '#/components/responses/CreatedID' }
 
   ########################
   # CONSUMERS (API Key)
   ########################
   /api/v1/consumers/events:
     post:
       tags: [Consumers]
       summary: Ingesta batch de eventos
       description: |
         - Idempotencia por item (**eventId** único).
         - Header **Idempotency-Key** opcional para el batch (TTL 10 min).
         - Máx 1000 eventos y 2 MB por request.
       security: [{ apiKeyAuth: [] }]
       parameters:
         - in: header
           name: Idempotency-Key
           required: false
           description: Clave idempotente del batch.
           schema: { type: string, maxLength: 64 }
       requestBody:
         required: true
         content:
           application/json:
             schema: { $ref: '#/components/schemas/BatchEvents' }
       responses:
         '200': { $ref: '#/components/responses/BatchAck' }
         '400': { $ref: '#/components/responses/BadRequest' }
         '403': { $ref: '#/components/responses/Forbidden' }
         '429': { $ref: '#/components/responses/RateLimited' }
         '500': { $ref: '#/components/responses/InternalError' }
 
   /api/v1/consumers/heartbeat:
     post:
       tags: [Consumers]
       summary: Heartbeat de dispositivo
       security: [{ apiKeyAuth: [] }]
       requestBody:
         required: true
         content:
           application/json:
             schema: { $ref: '#/components/schemas/Heartbeat' }
       responses:
         '200': { $ref: '#/components/responses/Ok' }
         '400': { $ref: '#/components/responses/BadRequest' }
         '403': { $ref: '#/components/responses/Forbidden' }
         '429': { $ref: '#/components/responses/RateLimited' }
         '500': { $ref: '#/components/responses/InternalError' }
 
 components:
   ########################
   # Security
   ########################
   securitySchemes:
     bearerAuth:
       type: http
       scheme: bearer
       bearerFormat: JWT
       description: >
         Requiere claim `tenant_id` y `roles[]`. El servidor ignora `X-Tenant-Id` del cliente.
     apiKeyAuth:
       type: apiKey
       in: header
       name: X-Api-Key
       description: >
         Cada API Key está asociada a un `tenant_id`. El servidor ignora `X-Tenant-Id` del cliente.
 
   ########################
   # Common parameters
   ########################
   parameters:
     Cursor:
       name: cursor
       in: query
       required: false
       description: Cursor de paginación (keyset).
       schema: { type: string }
     Limit:
       name: limit
       in: query
       required: false
       description: Máximo de elementos a retornar (1..200).
       schema:
         type: integer
         minimum: 1
         maximum: 200
         default: 50
 
   ########################
   # Schemas (envelope + recursos)
   ########################
   schemas:
     Envelope:
       type: object
       properties:
         data: {}
         meta:
           type: object
           properties:
             next_cursor: { type: string, nullable: true }
         error:
           type: object
           nullable: true
           properties:
             code: { type: string }
             message: { type: string }
       required: [data]
 
     IDResponse:
       type: object
       properties: { id: { type: string } }
       required: [id]
 
     # Users
     User:
       type: object
       properties:
         id: { type: string }
         email: { type: string, format: email }
         name: { type: string }
         roles:
           type: array
           items: { type: string, enum: [owner, admin, viewer, operator] }
         active: { type: boolean }
         createdAt: { type: string, format: date-time }
       required: [id, email, name, roles, active]
     UserCreate:
       type: object
       properties:
         email: { type: string, format: email }
         name: { type: string }
         roles:
           type: array
           items: { type: string, enum: [admin, viewer, operator] }
       required: [email, name]
 
     # Machines
     Machine:
       type: object
       properties:
         id: { type: string }
         code: { type: string }
         meta:
           type: object
           additionalProperties: true
         active: { type: boolean }
         createdAt: { type: string, format: date-time }
       required: [id, code, active]
     MachineCreate:
       type: object
       properties:
         code: { type: string }
         meta:
           type: object
           additionalProperties: true
       required: [code]
 
     # Tenants
     Tenant:
       type: object
       properties:
         id: { type: string }
         name: { type: string }
         createdAt: { type: string, format: date-time }
       required: [id, name]
     TenantCreate:
       type: object
       properties:
         id: { type: string, description: Identificador interno (slug/UUID). }
         name: { type: string }
       required: [id, name]
 
     # Consumers (events & heartbeat)
     BatchEvents:
       type: object
       properties:
         events:
           type: array
           minItems: 1
           maxItems: 1000
           items:
             $ref: '#/components/schemas/EventItem'
       required: [events]
     EventItem:
       type: object
       properties:
         eventId: { type: string, description: Único para idempotencia. }
         machineId: { type: string }
         ts: { type: string, format: date-time }
         seq: { type: integer, minimum: 0 }
         kind: { type: string, enum: [metric, alarm, heartbeat] }
         schemaVersion: { type: integer, minimum: 1 }
         payload:
           type: object
           additionalProperties: true
       required: [eventId, machineId, ts, kind, schemaVersion, payload]
 
     Heartbeat:
       type: object
       properties:
         machineId: { type: string }
         ts: { type: string, format: date-time }
         status: { type: string, enum: [online, offline, degraded] }
       required: [machineId, ts, status]
 
   ########################
   # Standard responses (envelope)
   ########################
   responses:
     CreatedID:
       description: Recurso creado
       content:
         application/json:
           schema:
             allOf:
               - $ref: '#/components/schemas/Envelope'
               - type: object
                 properties:
                   data: { $ref: '#/components/schemas/IDResponse' }
 
     UserList:
       description: Lista de usuarios
       content:
         application/json:
           schema:
             allOf:
               - $ref: '#/components/schemas/Envelope'
               - type: object
                 properties:
                   data:
                     type: array
                     items: { $ref: '#/components/schemas/User' }
 
     MachineList:
       description: Lista de máquinas
       content:
         application/json:
           schema:
             allOf:
               - $ref: '#/components/schemas/Envelope'
               - type: object
                 properties:
                   data:
                     type: array
                     items: { $ref: '#/components/schemas/Machine' }
 
     TenantList:
       description: Lista de tenants
       content:
         application/json:
           schema:
             allOf:
               - $ref: '#/components/schemas/Envelope'
               - type: object
                 properties:
                   data:
                     type: array
                     items: { $ref: '#/components/schemas/Tenant' }
 
     BatchAck:
       description: Resultado de ingesta
       content:
         application/json:
           schema:
             allOf:
               - $ref: '#/components/schemas/Envelope'
               - type: object
                 properties:
                   data:
                     type: object
                     properties:
                       accepted: { type: integer, minimum: 0 }
                       rejected: { type: integer, minimum: 0 }
                       # habilitable por feature flag:
                       errors:
                         type: array
                         items:
                           type: object
                           properties:
                             index: { type: integer, minimum: 0 }
                             code: { type: string }
                             message: { type: string }
 
     Ok:
       description: OK
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Envelope'
 
     BadRequest:
       description: Datos inválidos
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Envelope'
     Forbidden:
       description: Acción no permitida
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Envelope'
     RateLimited:
       description: Se excedieron los límites de tasa
       headers:
         Retry-After:
           description: Segundos a esperar antes de reintentar.
           schema: { type: integer, minimum: 0 }
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Envelope'
     InternalError:
       description: Error interno
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Envelope'
